class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, node):
        if self.parent[node] != node:
            self.parent[node] = self.find(self.parent[node])  # Path compression
        return self.parent[node]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)

        if root_u != root_v:
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1
            return True
        return False

def kruskal_mst(vertices, edges):
    edges.sort(key=lambda x: x[2])  # Sort edges by weight
    ds = DisjointSet(vertices)
    mst = []
    mst_cost = 0

    for u, v, weight in edges:
        if ds.union(u, v):
            mst.append((u, v, weight))
            mst_cost += weight
            if len(mst) == vertices - 1:
                break

    return mst, mst_cost

def main():
    vertices = int(input("Enter the number of vertices: "))
    edges_count = int(input("Enter the number of edges: "))
    edges = []

    print("Enter edges in format: u v weight (0-based indexing)")
    for _ in range(edges_count):
        u, v, weight = map(int, input().split())
        edges.append((u, v, weight))

    mst, cost = kruskal_mst(vertices, edges)

    print("\nMinimum Spanning Tree (MST) edges:")
    for u, v, weight in mst:
        print(f"{u} -- {v} == {weight}")

    print(f"Total cost of MST: {cost}")

if __name__ == "__main__":
    main()
