class NQueensSolver:
    def __init__(self, N):
        self.N = N
        self.board = [[0 for _ in range(N)] for _ in range(N)]
        self.solutions = []

    def is_safe(self, row, col):
        # Check this column
        for i in range(row):
            if self.board[i][col] == 1:
                return False

        # Check upper-left diagonal
        for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
            if self.board[i][j] == 1:
                return False

        # Check upper-right diagonal
        for i, j in zip(range(row-1, -1, -1), range(col+1, self.N)):
            if self.board[i][j] == 1:
                return False

        return True

    def solve(self, row=0):
        if row == self.N:
            # Save the current board as a solution
            self.solutions.append([row[:] for row in self.board])
            return

        for col in range(self.N):
            if self.is_safe(row, col):
                self.board[row][col] = 1
                self.solve(row + 1)
                self.board[row][col] = 0

    def print_solutions(self):
        if not self.solutions:
            print(f"No solutions exist for N = {self.N}")
            return

        print(f"\nTotal solutions for N = {self.N}: {len(self.solutions)}\n")
        for idx, sol in enumerate(self.solutions, start=1):
            print(f"Solution #{idx}:")
            for row in sol:
                print(" ".join("Q" if col else "." for col in row))
            print()

def main():
    N = int(input("Enter the number of queens (N): "))
    solver = NQueensSolver(N)
    solver.solve()
    solver.print_solutions()

if __name__ == "__main__":
    main()
