def print_solution(board, N):
    print("\nOne possible solution:")
    for row in board:
        print(" ".join("Q" if col else "." for col in row))

def is_safe(board, row, col, N):
    for i in range(row):
        if board[i][col] == 1:
            return False
        
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j] == 1:
            return False

    for i, j in zip(range(row-1, -1, -1), range(col+1, N)):
        if board[i][j] == 1:
            return False
    return True

def solve_n_queens(board, row, N):
    if row == N:
        return True

    for col in range(N):
        if is_safe(board, row, col, N):
            board[row][col] = 1
            if solve_n_queens(board, row + 1, N):
                return True
            board[row][col] = 0
    return False

def main():
    N = int(input("Enter the number of queens (N): "))
    board = [[0 for _ in range(N)] for _ in range(N)]

    if solve_n_queens(board, 0, N):
        print_solution(board, N)
    else:
        print("No solution exists for N =", N)

if __name__ == "__main__":
    main()
