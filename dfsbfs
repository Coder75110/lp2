from collections import deque

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = {i: [] for i in range(vertices)}

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def dfs(self, start):
        visited = [False] * self.vertices
        print("DFS Traversal:", end=" ")
        self.dfs_recursive(start, visited)
        print()

    def dfs_recursive(self, node, visited):
        visited[node] = True
        print(node, end=" ")
        for neighbor in self.graph[node]:
            if not visited[neighbor]:
                self.dfs_recursive(neighbor, visited)

    def bfs(self, start):
        visited = [False] * self.vertices
        queue = deque()

        visited[start] = True
        queue.append(start)

        print("BFS Traversal:", end=" ")

        while queue:
            current = queue.popleft()
            print(current, end=" ")

            for neighbor in self.graph[current]:
                if not visited[neighbor]:
                    visited[neighbor] = True
                    queue.append(neighbor)
        print()

def main():
    vertices = int(input("Enter the number of vertices: "))
    edges = int(input("Enter the number of edges: "))

    graph = Graph(vertices)

    print("Enter the edges (u v):")
    for i in range(edges):
        u, v = map(int, input().split())
        graph.add_edge(u, v)

    start_vertex = int(input("Enter the starting vertex: "))

    print("\nPerforming DFS and BFS Traversals...")
    graph.dfs(start_vertex)
    graph.bfs(start_vertex)

if __name__ == "__main__":
    main()
